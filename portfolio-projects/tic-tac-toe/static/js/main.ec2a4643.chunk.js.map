{"version":3,"sources":["components/Square.js","components/Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","components_Square","squares","renderSquare","React","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","step","setState","slice","concat","status","_this2","current","winner","moves","map","move","desc","key","href","jumpTo","components_Board","handleClick","App","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec2a4643.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props){\n\t\treturn (\n\t\t\t<button className=\"square\" onClick={() => props.onClick()}>\n\t\t\t{props.value}\n\t\t\t</button>\n\t\t)\n}\nexport default Square;\n","import React from 'react';\n\nimport Square from './Square';\n\nclass Board extends React.Component {\n  \n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Board;","import React from 'react';\nimport Board from './components/Board';\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nclass Game extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n    });\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber+1)\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? '❌' : '⭕️';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let status;\n    if(winner){\n      status = 'Winner: ' + winner;\n    }else{\n      status = 'Next player: ' + (this.state.xIsNext ? '❌' : '⭕️');\n    }\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Move #' + move : 'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={(i)=>this.handleClick(i)}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{ status }</div>\n          <ol>{ moves }</ol>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport './TicTacToe.css';\nimport Game from './Game.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Let's Play Tic Tac Toe!</h2>\n        </div>\n        <p className=\"App-intro\">\n          <Game></Game>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}